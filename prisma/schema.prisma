// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id             String         @id @default(uuid())
  name           String
  slug           String         @unique
  description    String
  avatarImageUrl String
  coverImageUrl  String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  menuCategories MenuCategory[]
  produts        Product[]
  orders         Order[]
}

model MenuCategory {
  id           String     @id @default(uuid())
  name         String
  restaurantId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  products     Product[]
}

model Product {
  id             String       @id @default(uuid())
  name           String
  description    String
  price          Float
  imageUrl       String
  ingredients    String[]
  restaurantId   String
  menuCategoryId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  restaurant     Restaurant   @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  menuCategory   MenuCategory @relation(fields: [menuCategoryId], references: [id], onDelete: Cascade)
  orderItems     OrderItem[]
}

model Order {
  id              Int             @id @default(autoincrement())
  total           Float
  restaurantId    String
  status          OrderStatus
  consumptionType ConsumptionType
  customerName    String
  customerCPF     String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  restaurant      Restaurant      @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  orderItems      OrderItem[]
}

model OrderItem {
  id        String   @id @default(uuid())
  productId String
  orderId   Int
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  avatarUrl String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  IN_PREPARATION
  DELIVERING
  DELIVERED
  CANCELED
}

enum ConsumptionType {
  TAKEAWAY
  DELIVERY
  IN_LOCAL
}
